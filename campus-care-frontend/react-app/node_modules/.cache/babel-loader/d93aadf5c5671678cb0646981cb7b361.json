{"ast":null,"code":"import axios from \"axios\";\nimport LocalStorageService from \"./LocalStorageService\";\n\nconst ReservationService = function () {\n  const path = \"http://localhost:8080/api/v1/reservations\";\n\n  const _getReservations = async () => {\n    const response = await axios.get(\"http://localhost:8080/api/v1/reservations\", {\n      headers: {\n        'Authorization': `Basic ${token}`\n      }\n    });\n\n    if (response) {\n      return response.data;\n    }\n  };\n\n  const _getReservation = async id => {\n    const url = \"http://localhost:8080/api/v1/reservations/\" + id;\n    const response = await axios.get(url, {\n      headers: {\n        Authorization: \"Bearer \" + LocalStorageService.getToken()\n      }\n    });\n\n    if (response) {\n      return response.data;\n    }\n  };\n\n  const _createReservation = async reservation => {\n    const response = await axios.post(\"http://localhost:8080/api/v1/reservations\", {}, {\n      headers: {\n        userId: reservation.userId,\n        date: reservation.date,\n        timeSlot: reservation.timeSlot,\n        place: reservation.place,\n        type: reservation.type,\n        Authorization: \"Bearer \" + LocalStorageService.getToken()\n      }\n    });\n\n    if (response) {\n      return response.data;\n    }\n  };\n\n  const _deleteReservation = async id => {\n    const url = \"http://localhost:8080/api/v1/reservations/\" + id;\n    const response = await axios.delete(url, {\n      headers: {\n        Authorization: \"Bearer \" + LocalStorageService.getToken()\n      }\n    });\n\n    if (response) {\n      return response.data;\n    }\n  };\n\n  const _getAvailableTimes = async (type, date, place) => {\n    const response = await axios.get(path.concat(\"/timeSlot\"), {\n      headers: {\n        type: type,\n        date: date,\n        place: place,\n        Authorization: \"Bearer \" + LocalStorageService.getToken()\n      }\n    });\n\n    if (response) {\n      return response.data;\n    }\n  };\n\n  const _getPlaces = async type => {\n    const response = await axios.get(path.concat(\"/places\"), {\n      headers: {\n        type: type,\n        Authorization: \"Bearer \" + LocalStorageService.getToken()\n      }\n    });\n\n    if (response) {\n      return response.data;\n    }\n  };\n\n  return {\n    getReservations: _getReservations,\n    getReservation: _getReservation,\n    createReservation: _createReservation,\n    deleteReservation: _deleteReservation,\n    getAvailableTimes: _getAvailableTimes,\n    getPlaces: _getPlaces\n  };\n}();\n\nexport default ReservationService;","map":{"version":3,"sources":["/Users/elifcenesiz/Documents/GitHub/panic-at-the-devops/campus-care-frontend/react-app/src/service/ReservationService.js"],"names":["axios","LocalStorageService","ReservationService","path","_getReservations","response","get","headers","token","data","_getReservation","id","url","Authorization","getToken","_createReservation","reservation","post","userId","date","timeSlot","place","type","_deleteReservation","delete","_getAvailableTimes","concat","_getPlaces","getReservations","getReservation","createReservation","deleteReservation","getAvailableTimes","getPlaces"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;;AAEA,MAAMC,kBAAkB,GAAI,YAAY;AAEtC,QAAMC,IAAI,GAAG,2CAAb;;AAEA,QAAMC,gBAAgB,GAAG,YAAY;AAEnC,UAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CACrB,2CADqB,EACuB;AAACC,MAAAA,OAAO,EAAC;AAAC,yBAAkB,SAAQC,KAAM;AAAjC;AAAT,KADvB,CAAvB;;AAGA,QAAIH,QAAJ,EAAc;AACZ,aAAOA,QAAQ,CAACI,IAAhB;AACD;AACF,GARD;;AAUA,QAAMC,eAAe,GAAG,MAAOC,EAAP,IAAc;AACpC,UAAMC,GAAG,GAAG,+CAA+CD,EAA3D;AACA,UAAMN,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAUM,GAAV,EAAe;AAACL,MAAAA,OAAO,EAAC;AAACM,QAAAA,aAAa,EAAG,YAAYZ,mBAAmB,CAACa,QAApB;AAA7B;AAAT,KAAf,CAAvB;;AACA,QAAIT,QAAJ,EAAc;AACZ,aAAOA,QAAQ,CAACI,IAAhB;AACD;AACF,GAND;;AAQA,QAAMM,kBAAkB,GAAG,MAAOC,WAAP,IAAuB;AAChD,UAAMX,QAAQ,GAAG,MAAML,KAAK,CAACiB,IAAN,CACrB,2CADqB,EAErB,EAFqB,EAGrB;AACEV,MAAAA,OAAO,EAAE;AACPW,QAAAA,MAAM,EAAEF,WAAW,CAACE,MADb;AAEPC,QAAAA,IAAI,EAAEH,WAAW,CAACG,IAFX;AAGPC,QAAAA,QAAQ,EAAEJ,WAAW,CAACI,QAHf;AAIPC,QAAAA,KAAK,EAAEL,WAAW,CAACK,KAJZ;AAKPC,QAAAA,IAAI,EAAEN,WAAW,CAACM,IALX;AAMPT,QAAAA,aAAa,EAAG,YAAYZ,mBAAmB,CAACa,QAApB;AANrB;AADX,KAHqB,CAAvB;;AAcA,QAAIT,QAAJ,EAAc;AACZ,aAAOA,QAAQ,CAACI,IAAhB;AACD;AACF,GAlBD;;AAoBA,QAAMc,kBAAkB,GAAG,MAAOZ,EAAP,IAAc;AACvC,UAAMC,GAAG,GAAG,+CAA+CD,EAA3D;AACA,UAAMN,QAAQ,GAAG,MAAML,KAAK,CAACwB,MAAN,CAAaZ,GAAb,EAAkB;AAACL,MAAAA,OAAO,EAAC;AAACM,QAAAA,aAAa,EAAG,YAAYZ,mBAAmB,CAACa,QAApB;AAA7B;AAAT,KAAlB,CAAvB;;AACA,QAAIT,QAAJ,EAAc;AACZ,aAAOA,QAAQ,CAACI,IAAhB;AACD;AACF,GAND;;AAQA,QAAMgB,kBAAkB,GAAC,OAAOH,IAAP,EAAaH,IAAb,EAAmBE,KAAnB,KAA6B;AACpD,UAAMhB,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAUH,IAAI,CAACuB,MAAL,CAAY,WAAZ,CAAV,EAAoC;AACzDnB,MAAAA,OAAO,EAAE;AACPe,QAAAA,IAAI,EAAEA,IADC;AAEPH,QAAAA,IAAI,EAAEA,IAFC;AAGPE,QAAAA,KAAK,EAAEA,KAHA;AAIPR,QAAAA,aAAa,EAAG,YAAYZ,mBAAmB,CAACa,QAApB;AAJrB;AADgD,KAApC,CAAvB;;AAQA,QAAIT,QAAJ,EAAc;AACZ,aAAOA,QAAQ,CAACI,IAAhB;AACD;AACF,GAZD;;AAcA,QAAMkB,UAAU,GAAC,MAAOL,IAAP,IAAgB;AAC/B,UAAMjB,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAUH,IAAI,CAACuB,MAAL,CAAY,SAAZ,CAAV,EAAkC;AACvDnB,MAAAA,OAAO,EAAE;AACPe,QAAAA,IAAI,EAAEA,IADC;AAEPT,QAAAA,aAAa,EAAG,YAAYZ,mBAAmB,CAACa,QAApB;AAFrB;AAD8C,KAAlC,CAAvB;;AAMA,QAAIT,QAAJ,EAAc;AACZ,aAAOA,QAAQ,CAACI,IAAhB;AACD;AACF,GAVD;;AAYA,SAAO;AACLmB,IAAAA,eAAe,EAAExB,gBADZ;AAELyB,IAAAA,cAAc,EAAEnB,eAFX;AAGLoB,IAAAA,iBAAiB,EAAEf,kBAHd;AAILgB,IAAAA,iBAAiB,EAAER,kBAJd;AAKLS,IAAAA,iBAAiB,EAAEP,kBALd;AAMLQ,IAAAA,SAAS,EAAEN;AANN,GAAP;AAQD,CApF0B,EAA3B;;AAqFA,eAAezB,kBAAf","sourcesContent":["import axios from \"axios\";\nimport LocalStorageService from \"./LocalStorageService\";\n\nconst ReservationService = (function () {\n\n  const path = \"http://localhost:8080/api/v1/reservations\";\n\n  const _getReservations = async () => {\n\n    const response = await axios.get(\n      \"http://localhost:8080/api/v1/reservations\",{headers:{'Authorization': `Basic ${token}`}}\n    );\n    if (response) {\n      return response.data;\n    }\n  };\n\n  const _getReservation = async (id) => {\n    const url = \"http://localhost:8080/api/v1/reservations/\" + id;\n    const response = await axios.get(url, {headers:{Authorization : \"Bearer \" + LocalStorageService.getToken()}});\n    if (response) {\n      return response.data;\n    }\n  };\n\n  const _createReservation = async (reservation) => {\n    const response = await axios.post(\n      \"http://localhost:8080/api/v1/reservations\",\n      {},\n      {\n        headers: {\n          userId: reservation.userId,\n          date: reservation.date,\n          timeSlot: reservation.timeSlot,\n          place: reservation.place,\n          type: reservation.type,\n          Authorization : \"Bearer \" + LocalStorageService.getToken()\n        },\n      }\n    );\n    if (response) {\n      return response.data;\n    }\n  };\n\n  const _deleteReservation = async (id) => {\n    const url = \"http://localhost:8080/api/v1/reservations/\" + id;\n    const response = await axios.delete(url, {headers:{Authorization : \"Bearer \" + LocalStorageService.getToken()}});\n    if (response) {\n      return response.data;\n    }\n  };\n\n  const _getAvailableTimes=async (type, date, place) => {\n    const response = await axios.get(path.concat(\"/timeSlot\"), {\n      headers: {\n        type: type,\n        date: date,\n        place: place,\n        Authorization : \"Bearer \" + LocalStorageService.getToken()\n      }\n    });\n    if (response) {\n      return response.data;\n    }\n  }\n\n  const _getPlaces=async (type) => {\n    const response = await axios.get(path.concat(\"/places\"), {\n      headers: {\n        type: type,\n        Authorization : \"Bearer \" + LocalStorageService.getToken()\n      }\n    });\n    if (response) {\n      return response.data;\n    }\n  }\n\n  return {\n    getReservations: _getReservations,\n    getReservation: _getReservation,\n    createReservation: _createReservation,\n    deleteReservation: _deleteReservation,\n    getAvailableTimes: _getAvailableTimes,\n    getPlaces: _getPlaces\n  };\n})();\nexport default ReservationService;\n\n"]},"metadata":{},"sourceType":"module"}