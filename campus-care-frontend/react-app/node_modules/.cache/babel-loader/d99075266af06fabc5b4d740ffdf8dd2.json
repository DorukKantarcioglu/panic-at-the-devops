{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport LocalStorageUtil from \"./LocalStorageService\";\nimport { useHistory } from \"react-router-dom\";\n\nconst AxiosConfigurer = _s(function () {\n  _s();\n\n  const history = useHistory();\n\n  const _configure = () => {\n    // Add a request interceptor\n    axios.interceptors.request.use(config => {\n      const token = LocalStorageUtil.getToken();\n\n      if (token) {\n        config.headers[\"Authorization\"] = \"Bearer \" + token;\n      } // config.headers['Content-Type'] = 'application/json';\n\n\n      return config;\n    }, error => {//Promise.reject(error);\n    });\n  };\n\n  return {\n    configure: _configure\n  };\n}, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n})();\n\nexport default AxiosConfigurer;","map":{"version":3,"sources":["/Users/elifcenesiz/Documents/GitHub/panic-at-the-devops/campus-care-frontend/react-app/src/service/AxiosConfigurer.js"],"names":["axios","LocalStorageUtil","useHistory","AxiosConfigurer","history","_configure","interceptors","request","use","config","token","getToken","headers","error","configure"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AACA,SAAQC,UAAR,QAAyB,kBAAzB;;AAEA,MAAMC,eAAe,GAAG,GAAC,YAAY;AAAA;;AAEjC,QAAMC,OAAO,GAAGF,UAAU,EAA1B;;AAEA,QAAMG,UAAU,GAAG,MAAM;AACrB;AACAL,IAAAA,KAAK,CAACM,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,YAAMC,KAAK,GAAGT,gBAAgB,CAACU,QAAjB,EAAd;;AACA,UAAID,KAAJ,EAAW;AACPD,QAAAA,MAAM,CAACG,OAAP,CAAe,eAAf,IAAkC,YAAYF,KAA9C;AACH,OAJO,CAKR;;;AACA,aAAOD,MAAP;AACH,KARL,EASKI,KAAD,IAAW,CAEP;AACH,KAZL;AAcH,GAhBD;;AAkBA,SAAO;AACHC,IAAAA,SAAS,EAAET;AADR,GAAP;AAGH,CAzBuB;AAAA,UAEJH,UAFI;AAAA,IAAxB;;AA2BA,eAAeC,eAAf","sourcesContent":["import axios from \"axios\";\nimport LocalStorageUtil from \"./LocalStorageService\";\nimport {useHistory} from \"react-router-dom\";\n\nconst AxiosConfigurer = (function () {\n\n    const history = useHistory();\n\n    const _configure = () => {\n        // Add a request interceptor\n        axios.interceptors.request.use(\n            (config) => {\n                const token = LocalStorageUtil.getToken();\n                if (token) {\n                    config.headers[\"Authorization\"] = \"Bearer \" + token;\n                }\n                // config.headers['Content-Type'] = 'application/json';\n                return config;\n            },\n            (error) => {\n\n                //Promise.reject(error);\n            }\n        );\n    };\n\n    return {\n        configure: _configure\n    };\n})();\n\nexport default AxiosConfigurer;\n"]},"metadata":{},"sourceType":"module"}