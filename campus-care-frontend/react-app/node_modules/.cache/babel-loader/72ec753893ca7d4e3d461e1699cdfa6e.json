{"ast":null,"code":"import { jsx as e, jsxs as t } from \"react/jsx-runtime\";\nimport * as i from \"react\";\nimport { useState as o, useCallback as r, useMemo as n } from \"react\";\nimport { useTheme as l } from \"@nivo/core\";\nimport a from \"prop-types\";\n\nvar d = function (t) {\n  var i = t.x,\n      o = t.y,\n      r = t.size,\n      n = t.fill,\n      l = t.opacity,\n      a = void 0 === l ? 1 : l,\n      d = t.borderWidth,\n      s = void 0 === d ? 0 : d,\n      c = t.borderColor;\n  return e(\"circle\", {\n    r: r / 2,\n    cx: i + r / 2,\n    cy: o + r / 2,\n    fill: n,\n    opacity: a,\n    strokeWidth: s,\n    stroke: void 0 === c ? \"transparent\" : c,\n    style: {\n      pointerEvents: \"none\"\n    }\n  });\n},\n    s = function (t) {\n  var i = t.x,\n      o = t.y,\n      r = t.size,\n      n = t.fill,\n      l = t.opacity,\n      a = void 0 === l ? 1 : l,\n      d = t.borderWidth,\n      s = void 0 === d ? 0 : d,\n      c = t.borderColor;\n  return e(\"g\", {\n    transform: \"translate(\" + i + \",\" + o + \")\",\n    children: e(\"path\", {\n      d: \"\\n                    M\" + r / 2 + \" 0\\n                    L\" + .8 * r + \" \" + r / 2 + \"\\n                    L\" + r / 2 + \" \" + r + \"\\n                    L\" + .2 * r + \" \" + r / 2 + \"\\n                    L\" + r / 2 + \" 0\\n                \",\n      fill: n,\n      opacity: a,\n      strokeWidth: s,\n      stroke: void 0 === c ? \"transparent\" : c,\n      style: {\n        pointerEvents: \"none\"\n      }\n    })\n  });\n},\n    c = function (t) {\n  var i = t.x,\n      o = t.y,\n      r = t.size,\n      n = t.fill,\n      l = t.opacity,\n      a = void 0 === l ? 1 : l,\n      d = t.borderWidth,\n      s = void 0 === d ? 0 : d,\n      c = t.borderColor;\n  return e(\"rect\", {\n    x: i,\n    y: o,\n    fill: n,\n    opacity: a,\n    strokeWidth: s,\n    stroke: void 0 === c ? \"transparent\" : c,\n    width: r,\n    height: r,\n    style: {\n      pointerEvents: \"none\"\n    }\n  });\n},\n    m = function (t) {\n  var i = t.x,\n      o = t.y,\n      r = t.size,\n      n = t.fill,\n      l = t.opacity,\n      a = void 0 === l ? 1 : l,\n      d = t.borderWidth,\n      s = void 0 === d ? 0 : d,\n      c = t.borderColor;\n  return e(\"g\", {\n    transform: \"translate(\" + i + \",\" + o + \")\",\n    children: e(\"path\", {\n      d: \"\\n                M\" + r / 2 + \" 0\\n                L\" + r + \" \" + r + \"\\n                L0 \" + r + \"\\n                L\" + r / 2 + \" 0\\n            \",\n      fill: n,\n      opacity: a,\n      strokeWidth: s,\n      stroke: void 0 === c ? \"transparent\" : c,\n      style: {\n        pointerEvents: \"none\"\n      }\n    })\n  });\n};\n\nfunction h() {\n  return h = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var i = arguments[t];\n\n      for (var o in i) Object.prototype.hasOwnProperty.call(i, o) && (e[o] = i[o]);\n    }\n\n    return e;\n  }, h.apply(this, arguments);\n}\n\nvar u = {\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0\n},\n    b = function (e) {\n  var t,\n      i = e.direction,\n      o = e.itemsSpacing,\n      r = e.padding,\n      n = e.itemCount,\n      l = e.itemWidth,\n      a = e.itemHeight;\n  if (\"number\" != typeof r && (\"object\" != typeof (t = r) || Array.isArray(t) || null === t)) throw new Error(\"Invalid property padding, must be one of: number, object\");\n  var d = \"number\" == typeof r ? {\n    top: r,\n    right: r,\n    bottom: r,\n    left: r\n  } : h({}, u, r),\n      s = d.left + d.right,\n      c = d.top + d.bottom,\n      m = l + s,\n      b = a + c,\n      f = (n - 1) * o;\n  return \"row\" === i ? m = l * n + f + s : \"column\" === i && (b = a * n + f + c), {\n    width: m,\n    height: b,\n    padding: d\n  };\n},\n    f = function (e) {\n  var t = e.anchor,\n      i = e.translateX,\n      o = e.translateY,\n      r = e.containerWidth,\n      n = e.containerHeight,\n      l = e.width,\n      a = e.height,\n      d = i,\n      s = o;\n\n  switch (t) {\n    case \"top\":\n      d += (r - l) / 2;\n      break;\n\n    case \"top-right\":\n      d += r - l;\n      break;\n\n    case \"right\":\n      d += r - l, s += (n - a) / 2;\n      break;\n\n    case \"bottom-right\":\n      d += r - l, s += n - a;\n      break;\n\n    case \"bottom\":\n      d += (r - l) / 2, s += n - a;\n      break;\n\n    case \"bottom-left\":\n      s += n - a;\n      break;\n\n    case \"left\":\n      s += (n - a) / 2;\n      break;\n\n    case \"center\":\n      d += (r - l) / 2, s += (n - a) / 2;\n  }\n\n  return {\n    x: d,\n    y: s\n  };\n},\n    g = function (e) {\n  var t,\n      i,\n      o,\n      r,\n      n,\n      l,\n      a = e.direction,\n      d = e.justify,\n      s = e.symbolSize,\n      c = e.symbolSpacing,\n      m = e.width,\n      h = e.height;\n\n  switch (a) {\n    case \"left-to-right\":\n      t = 0, i = (h - s) / 2, r = h / 2, l = \"central\", !0 === d ? (o = m, n = \"end\") : (o = s + c, n = \"start\");\n      break;\n\n    case \"right-to-left\":\n      t = m - s, i = (h - s) / 2, r = h / 2, l = \"central\", !0 === d ? (o = 0, n = \"start\") : (o = m - s - c, n = \"end\");\n      break;\n\n    case \"top-to-bottom\":\n      t = (m - s) / 2, i = 0, o = m / 2, n = \"middle\", !0 === d ? (r = h, l = \"alphabetic\") : (r = s + c, l = \"text-before-edge\");\n      break;\n\n    case \"bottom-to-top\":\n      t = (m - s) / 2, i = h - s, o = m / 2, n = \"middle\", !0 === d ? (r = 0, l = \"text-before-edge\") : (r = h - s - c, l = \"alphabetic\");\n  }\n\n  return {\n    symbolX: t,\n    symbolY: i,\n    labelX: o,\n    labelY: r,\n    labelAnchor: n,\n    labelAlignment: l\n  };\n},\n    y = {\n  circle: d,\n  diamond: s,\n  square: c,\n  triangle: m\n},\n    p = function (n) {\n  var a,\n      d,\n      s,\n      c,\n      m,\n      u,\n      b,\n      f,\n      p,\n      v,\n      S,\n      x = n.x,\n      k = n.y,\n      C = n.width,\n      W = n.height,\n      B = n.data,\n      w = n.direction,\n      z = void 0 === w ? \"left-to-right\" : w,\n      O = n.justify,\n      E = void 0 !== O && O,\n      M = n.textColor,\n      j = n.background,\n      H = void 0 === j ? \"transparent\" : j,\n      L = n.opacity,\n      X = void 0 === L ? 1 : L,\n      Y = n.symbolShape,\n      A = void 0 === Y ? \"square\" : Y,\n      T = n.symbolSize,\n      q = void 0 === T ? 16 : T,\n      R = n.symbolSpacing,\n      D = void 0 === R ? 8 : R,\n      F = n.symbolBorderWidth,\n      I = void 0 === F ? 0 : F,\n      P = n.symbolBorderColor,\n      G = void 0 === P ? \"transparent\" : P,\n      J = n.onClick,\n      K = n.onMouseEnter,\n      N = n.onMouseLeave,\n      Q = n.toggleSerie,\n      U = n.effects,\n      V = o({}),\n      Z = V[0],\n      $ = V[1],\n      _ = l(),\n      ee = r(function (e) {\n    if (U) {\n      var t = U.filter(function (e) {\n        return \"hover\" === e.on;\n      }).reduce(function (e, t) {\n        return h({}, e, t.style);\n      }, {});\n      $(t);\n    }\n\n    null == K || K(B, e);\n  }, [K, B, U]),\n      te = r(function (e) {\n    if (U) {\n      var t = U.filter(function (e) {\n        return \"hover\" !== e.on;\n      }).reduce(function (e, t) {\n        return h({}, e, t.style);\n      }, {});\n      $(t);\n    }\n\n    null == N || N(B, e);\n  }, [N, B, U]),\n      ie = g({\n    direction: z,\n    justify: E,\n    symbolSize: null != (a = Z.symbolSize) ? a : q,\n    symbolSpacing: D,\n    width: C,\n    height: W\n  }),\n      oe = ie.symbolX,\n      re = ie.symbolY,\n      ne = ie.labelX,\n      le = ie.labelY,\n      ae = ie.labelAnchor,\n      de = ie.labelAlignment,\n      se = [J, K, N, Q].some(function (e) {\n    return void 0 !== e;\n  }),\n      ce = \"function\" == typeof A ? A : y[A];\n\n  return t(\"g\", {\n    transform: \"translate(\" + x + \",\" + k + \")\",\n    style: {\n      opacity: null != (d = Z.itemOpacity) ? d : X\n    },\n    children: [e(\"rect\", {\n      width: C,\n      height: W,\n      fill: null != (s = Z.itemBackground) ? s : H,\n      style: {\n        cursor: se ? \"pointer\" : \"auto\"\n      },\n      onClick: function (e) {\n        null == J || J(B, e), null == Q || Q(B.id);\n      },\n      onMouseEnter: ee,\n      onMouseLeave: te\n    }), i.createElement(ce, h({\n      id: B.id,\n      x: oe,\n      y: re,\n      size: null != (c = Z.symbolSize) ? c : q,\n      fill: null != (m = null != (u = B.fill) ? u : B.color) ? m : \"black\",\n      borderWidth: null != (b = Z.symbolBorderWidth) ? b : I,\n      borderColor: null != (f = Z.symbolBorderColor) ? f : G\n    }, B.hidden ? _.legends.hidden.symbol : void 0)), e(\"text\", {\n      textAnchor: ae,\n      style: h({}, _.legends.text, {\n        fill: null != (p = null != (v = null != (S = Z.itemTextColor) ? S : M) ? v : _.legends.text.fill) ? p : \"black\",\n        dominantBaseline: de,\n        pointerEvents: \"none\",\n        userSelect: \"none\"\n      }, B.hidden ? _.legends.hidden.text : void 0),\n      x: ne,\n      y: le,\n      children: B.label\n    })]\n  });\n},\n    v = function (t) {\n  var i = t.data,\n      o = t.x,\n      r = t.y,\n      n = t.direction,\n      l = t.padding,\n      a = void 0 === l ? 0 : l,\n      d = t.justify,\n      s = t.effects,\n      c = t.itemWidth,\n      m = t.itemHeight,\n      h = t.itemDirection,\n      u = void 0 === h ? \"left-to-right\" : h,\n      f = t.itemsSpacing,\n      g = void 0 === f ? 0 : f,\n      y = t.itemTextColor,\n      v = t.itemBackground,\n      S = void 0 === v ? \"transparent\" : v,\n      x = t.itemOpacity,\n      k = void 0 === x ? 1 : x,\n      C = t.symbolShape,\n      W = t.symbolSize,\n      B = t.symbolSpacing,\n      w = t.symbolBorderWidth,\n      z = t.symbolBorderColor,\n      O = t.onClick,\n      E = t.onMouseEnter,\n      M = t.onMouseLeave,\n      j = t.toggleSerie,\n      H = b({\n    itemCount: i.length,\n    itemWidth: c,\n    itemHeight: m,\n    itemsSpacing: g,\n    direction: n,\n    padding: a\n  }).padding,\n      L = \"row\" === n ? c + g : 0,\n      X = \"column\" === n ? m + g : 0;\n  return e(\"g\", {\n    transform: \"translate(\" + o + \",\" + r + \")\",\n    children: i.map(function (t, i) {\n      return e(p, {\n        data: t,\n        x: i * L + H.left,\n        y: i * X + H.top,\n        width: c,\n        height: m,\n        direction: u,\n        justify: d,\n        effects: s,\n        textColor: y,\n        background: S,\n        opacity: k,\n        symbolShape: C,\n        symbolSize: W,\n        symbolSpacing: B,\n        symbolBorderWidth: w,\n        symbolBorderColor: z,\n        onClick: O,\n        onMouseEnter: E,\n        onMouseLeave: M,\n        toggleSerie: j\n      }, i);\n    })\n  });\n},\n    S = function (t) {\n  var i = t.data,\n      o = t.containerWidth,\n      r = t.containerHeight,\n      n = t.translateX,\n      l = void 0 === n ? 0 : n,\n      a = t.translateY,\n      d = void 0 === a ? 0 : a,\n      s = t.anchor,\n      c = t.direction,\n      m = t.padding,\n      h = void 0 === m ? 0 : m,\n      u = t.justify,\n      g = t.itemsSpacing,\n      y = void 0 === g ? 0 : g,\n      p = t.itemWidth,\n      S = t.itemHeight,\n      x = t.itemDirection,\n      k = t.itemTextColor,\n      C = t.itemBackground,\n      W = t.itemOpacity,\n      B = t.symbolShape,\n      w = t.symbolSize,\n      z = t.symbolSpacing,\n      O = t.symbolBorderWidth,\n      E = t.symbolBorderColor,\n      M = t.onClick,\n      j = t.onMouseEnter,\n      H = t.onMouseLeave,\n      L = t.toggleSerie,\n      X = t.effects,\n      Y = b({\n    itemCount: i.length,\n    itemsSpacing: y,\n    itemWidth: p,\n    itemHeight: S,\n    direction: c,\n    padding: h\n  }),\n      A = Y.width,\n      T = Y.height,\n      q = f({\n    anchor: s,\n    translateX: l,\n    translateY: d,\n    containerWidth: o,\n    containerHeight: r,\n    width: A,\n    height: T\n  }),\n      R = q.x,\n      D = q.y;\n  return e(v, {\n    data: i,\n    x: R,\n    y: D,\n    direction: c,\n    padding: h,\n    justify: u,\n    effects: X,\n    itemsSpacing: y,\n    itemWidth: p,\n    itemHeight: S,\n    itemDirection: x,\n    itemTextColor: k,\n    itemBackground: C,\n    itemOpacity: W,\n    symbolShape: B,\n    symbolSize: w,\n    symbolSpacing: z,\n    symbolBorderWidth: O,\n    symbolBorderColor: E,\n    onClick: M,\n    onMouseEnter: j,\n    onMouseLeave: H,\n    toggleSerie: \"boolean\" == typeof L ? void 0 : L\n  });\n},\n    x = {\n  start: \"left\",\n  middle: \"center\",\n  end: \"right\"\n},\n    k = function (e, t) {\n  var i = t.data,\n      o = t.containerWidth,\n      r = t.containerHeight,\n      n = t.translateX,\n      l = void 0 === n ? 0 : n,\n      a = t.translateY,\n      d = void 0 === a ? 0 : a,\n      s = t.anchor,\n      c = t.direction,\n      m = t.padding,\n      h = void 0 === m ? 0 : m,\n      u = t.justify,\n      y = void 0 !== u && u,\n      p = t.itemsSpacing,\n      v = void 0 === p ? 0 : p,\n      S = t.itemWidth,\n      k = t.itemHeight,\n      C = t.itemDirection,\n      W = void 0 === C ? \"left-to-right\" : C,\n      B = t.itemTextColor,\n      w = t.symbolSize,\n      z = void 0 === w ? 16 : w,\n      O = t.symbolSpacing,\n      E = void 0 === O ? 8 : O,\n      M = t.theme,\n      j = b({\n    itemCount: i.length,\n    itemWidth: S,\n    itemHeight: k,\n    itemsSpacing: v,\n    direction: c,\n    padding: h\n  }),\n      H = j.width,\n      L = j.height,\n      X = j.padding,\n      Y = f({\n    anchor: s,\n    translateX: l,\n    translateY: d,\n    containerWidth: o,\n    containerHeight: r,\n    width: H,\n    height: L\n  }),\n      A = Y.x,\n      T = Y.y,\n      q = \"row\" === c ? S + v : 0,\n      R = \"column\" === c ? k + v : 0;\n  e.save(), e.translate(A, T), e.font = M.legends.text.fontSize + \"px \" + (M.legends.text.fontFamily || \"sans-serif\"), i.forEach(function (t, i) {\n    var o,\n        r,\n        n = i * q + X.left,\n        l = i * R + X.top,\n        a = g({\n      direction: W,\n      justify: y,\n      symbolSize: z,\n      symbolSpacing: E,\n      width: S,\n      height: k\n    }),\n        d = a.symbolX,\n        s = a.symbolY,\n        c = a.labelX,\n        m = a.labelY,\n        h = a.labelAnchor,\n        u = a.labelAlignment;\n    e.fillStyle = null != (o = t.color) ? o : \"black\", e.fillRect(n + d, l + s, z, z), e.textAlign = x[h], \"central\" === u && (e.textBaseline = \"middle\"), e.fillStyle = null != (r = null != B ? B : M.legends.text.fill) ? r : \"black\", e.fillText(String(t.label), n + c, l + m);\n  }), e.restore();\n},\n    C = function (e) {\n  var t = e.scale,\n      i = e.domain,\n      o = e.reverse,\n      r = void 0 !== o && o,\n      l = e.valueFormat,\n      a = void 0 === l ? function (e) {\n    return e;\n  } : l,\n      d = e.separator,\n      s = void 0 === d ? \" - \" : d;\n  return n(function () {\n    var e = (null != i ? i : t.range()).map(function (e, i) {\n      var o = t.invertExtent(e),\n          r = o[0],\n          n = o[1];\n      return {\n        id: e,\n        index: i,\n        extent: [r, n],\n        label: \"\" + a(r) + s + a(n),\n        value: t(r),\n        color: e\n      };\n    });\n    return !0 === r && e.reverse(), e;\n  }, [i, t, r]);\n},\n    W = {\n  data: a.arrayOf(a.object),\n  anchor: a.oneOf([\"top\", \"top-right\", \"right\", \"bottom-right\", \"bottom\", \"bottom-left\", \"left\", \"top-left\", \"center\"]).isRequired,\n  translateX: a.number,\n  translateY: a.number,\n  direction: a.oneOf([\"row\", \"column\"]).isRequired,\n  itemsSpacing: a.number,\n  itemWidth: a.number.isRequired,\n  itemHeight: a.number.isRequired,\n  itemDirection: a.oneOf([\"left-to-right\", \"right-to-left\", \"top-to-bottom\", \"bottom-to-top\"]),\n  itemTextColor: a.string,\n  itemBackground: a.string,\n  itemOpacity: a.number,\n  symbolShape: a.oneOfType([a.oneOf([\"circle\", \"diamond\", \"square\", \"triangle\"]), a.func]),\n  symbolSize: a.number,\n  symbolSpacing: a.number,\n  symbolBorderWidth: a.number,\n  symbolBorderColor: a.string,\n  onClick: a.func,\n  onMouseEnter: a.func,\n  onMouseLeave: a.func,\n  effects: a.arrayOf(a.shape({\n    on: a.oneOfType([a.oneOf([\"hover\"])]).isRequired,\n    style: a.shape({\n      itemTextColor: a.string,\n      itemBackground: a.string,\n      itemOpacity: a.number,\n      symbolSize: a.number,\n      symbolBorderWidth: a.number,\n      symbolBorderColor: a.string\n    }).isRequired\n  }))\n};\n\nexport { S as BoxLegendSvg, W as LegendPropShape, v as LegendSvg, p as LegendSvgItem, d as SymbolCircle, s as SymbolDiamond, c as SymbolSquare, m as SymbolTriangle, k as renderLegendToCanvas, C as useQuantizeColorScaleLegendData };","map":{"version":3,"sources":["../src/svg/symbols/SymbolCircle.tsx","../src/svg/symbols/SymbolDiamond.tsx","../src/svg/symbols/SymbolSquare.tsx","../src/svg/symbols/SymbolTriangle.tsx","../src/compute.ts","../src/svg/LegendSvgItem.tsx","../src/svg/LegendSvg.tsx","../src/svg/BoxLegendSvg.tsx","../src/canvas.ts","../src/hooks.ts","../src/props.ts"],"names":["SymbolCircle","x","y","size","fill","opacity","borderWidth","borderColor","_jsx","r","cx","cy","strokeWidth","stroke","style","pointerEvents","SymbolDiamond","transform","d","SymbolSquare","width","height","SymbolTriangle","item","Array","isArray","zeroPadding","top","right","bottom","left","computeDimensions","direction","itemsSpacing","padding","_padding","itemCount","itemWidth","itemHeight","Error","horizontalPadding","verticalPadding","spacing","computePositionFromAnchor","anchor","translateX","translateY","containerWidth","containerHeight","computeItemLayout","justify","symbolSize","symbolSpacing","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","symbolByShape","circle","diamond","square","triangle","LegendSvgItem","data","textColor","background","symbolShape","symbolBorderWidth","symbolBorderColor","onClick","onMouseEnter","onMouseLeave","toggleSerie","effects","setStyle","useState","theme","useTheme","handleMouseEnter","useCallback","event","filter","on","reduce","acc","effect","handleMouseLeave","isInteractive","some","handler","undefined","SymbolShape","_jsxs","itemOpacity","itemBackground","cursor","id","React","createElement","color","hidden","legends","symbol","textAnchor","text","itemTextColor","dominantBaseline","userSelect","label","LegendSvg","itemDirection","length","xStep","yStep","map","i","BoxLegendSvg","textAlignMapping","start","middle","end","renderLegendToCanvas","ctx","save","translate","font","fontSize","fontFamily","forEach","itemX","itemY","fillStyle","fillRect","textAlign","textBaseline","fillText","String","restore","useQuantizeColorScaleLegendData","scale","domain","overriddenDomain","reverse","valueFormat","v","separator","useMemo","range","items","domainValue","index","invertExtent","extent","value","LegendPropShape","PropTypes","arrayOf","object","oneOf","isRequired","number","string","oneOfType","func","shape"],"mappings":"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","sourcesContent":["import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { BoxLegendSvgProps, LegendAnchor, LegendItemDirection } from './types'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify === true) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify === true) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { computeDimensions, computePositionFromAnchor, computeItemLayout } from './compute'\nimport { LegendCanvasProps } from './types'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n","import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n        if (reverse === true) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse])\n}\n","import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n"]},"metadata":{},"sourceType":"module"}