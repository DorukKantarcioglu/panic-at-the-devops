{"ast":null,"code":"import axios from \"axios\";\nimport LocalStorageService from \"./LocalStorageService\";\nimport { notification } from \"antd\";\n\nconst StudentService = function () {\n  const _fetchAllStudents = async () => {\n    const response = await axios.get(\"http://localhost:8080/api/v1/students\", {\n      headers: {\n        Authorization: \"Bearer \" + LocalStorageService.getToken()\n      }\n    });\n\n    if (response) {\n      return response.data;\n    }\n  };\n\n  const _getStudentById = async id => {\n    const url = \"http://localhost:8080/api/v1/students/\" + id;\n    const response = await axios.get(url, {\n      headers: {\n        Authorization: \"Bearer \" + LocalStorageService.getToken()\n      }\n    });\n\n    if (response) {\n      return response.data;\n    }\n  };\n\n  const _getStudentByHesCode = async hesCode => {\n    const response = await axios.get(\"http://localhost:8080/api/v1/students\", {\n      headers: {\n        \"hesCode\": {\n          hesCode\n        }.toString()\n      }\n    });\n\n    if (response) {\n      return response.data;\n    }\n  };\n\n  const _validateHesCode = async (hesCode, trIdNumber, eGovernmentPassword) => {\n    const response = await axios.post(\"http://localhost:8080/api/v1/students\", {}, {\n      headers: {\n        \"hesCode\": hesCode,\n        \"tridNumber\": trIdNumber,\n        \"eGovernmentPassword\": eGovernmentPassword,\n        Authorization: \"Bearer \" + LocalStorageService.getToken()\n      }\n    });\n\n    if (response) {\n      return response.data;\n    }\n  };\n\n  const _createStudent = async () => {\n    const response = await axios.post(\"http://localhost:8080/api/v1/students\", [], {\n      headers: {\n        Authorization: \"Bearer \" + LocalStorageService.getToken()\n      }\n    });\n\n    if (response) {\n      return response.data;\n    }\n  };\n\n  const _updateHesCode = async (id, hesCode) => {\n    const url = \"http://localhost:8080/api/v1/students/\" + id;\n    const response = await axios.patch(url, {}, {\n      headers: {\n        \"hesCode\": hesCode,\n        Authorization: \"Bearer \" + LocalStorageService.getToken()\n      }\n    });\n\n    if (response) {\n      return response.data;\n    }\n  };\n\n  const _deleteStudent = async id => {\n    const url = \"http://localhost:8080/api/v1/students/\" + id;\n    const response = await axios.delete(url, {\n      headers: {\n        Authorization: \"Bearer \" + LocalStorageService.getToken()\n      }\n    });\n\n    if (response) {\n      return response.data;\n    }\n  };\n\n  const _getNotifications = async id => {\n    const url = \"http://localhost:8080/api/v1/students/\" + id + \"/notifications\";\n    const response = await axios.get(url, {\n      headers: {\n        Authorization: \"Bearer \" + LocalStorageService.getToken()\n      }\n    });\n  };\n\n  const _getReservations = async id => {\n    const url = \"http://localhost:8080/api/v1/students/\" + id + \"/reservations\";\n    const response = await axios.get(url, {\n      headers: {\n        Authorization: \"Bearer \" + LocalStorageService.getToken()\n      }\n    });\n  };\n\n  return {\n    fetchAllStudents: _fetchAllStudents,\n    getStudentById: _getStudentById,\n    createStudent: _createStudent,\n    getStudentByHesCode: _getStudentByHesCode,\n    updateHesCode: _updateHesCode,\n    deleteStudent: _deleteStudent,\n    validateHesCode: _validateHesCode,\n    getNotifications: _getNotifications,\n    getReservations: _getReservations\n  };\n}();\n\nexport default StudentService;","map":{"version":3,"sources":["/Users/elifcenesiz/Documents/GitHub/panic-at-the-devops/campus-care-frontend/react-app/src/service/StudentService.js"],"names":["axios","LocalStorageService","notification","StudentService","_fetchAllStudents","response","get","headers","Authorization","getToken","data","_getStudentById","id","url","_getStudentByHesCode","hesCode","toString","_validateHesCode","trIdNumber","eGovernmentPassword","post","_createStudent","_updateHesCode","patch","_deleteStudent","delete","_getNotifications","_getReservations","fetchAllStudents","getStudentById","createStudent","getStudentByHesCode","updateHesCode","deleteStudent","validateHesCode","getNotifications","getReservations"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport LocalStorageService from \"./LocalStorageService\";\nimport {notification} from \"antd\";\n\nconst StudentService = (function () {\n\n    const _fetchAllStudents = async()=>{\n        const response = await axios.get(\"http://localhost:8080/api/v1/students\",{headers:{\n                Authorization : \"Bearer \" + LocalStorageService.getToken()\n            }});\n        if (response) {\n            return response.data;\n        }\n\n    };\n\n    const _getStudentById = async (id)=>{\n        const url = \"http://localhost:8080/api/v1/students/\"+id\n        const response = await axios.get(url,{headers:{\n                Authorization : \"Bearer \" + LocalStorageService.getToken()\n            }})\n        if (response) {\n            return response.data;\n        }\n    }\n\n    const _getStudentByHesCode = async (hesCode)=>{\n        const response = await axios.get(\"http://localhost:8080/api/v1/students\", { headers:{\n            \"hesCode\": {hesCode}.toString()\n            }})\n        if (response) {\n            return response.data;\n        }\n    }\n\n    const _validateHesCode = async (hesCode, trIdNumber, eGovernmentPassword)=>{\n\n\n        const response = await axios.post(\"http://localhost:8080/api/v1/students\",{}, {headers: {\n                \"hesCode\": hesCode,\n                \"tridNumber\": trIdNumber,\n                \"eGovernmentPassword\": eGovernmentPassword,\n\n            Authorization : \"Bearer \" + LocalStorageService.getToken()\n\n            }})\n        if (response) {\n              return response.data;\n        }\n    }\n\n    const _createStudent = async()=>{\n        const response = await axios.post(\"http://localhost:8080/api/v1/students\",[],{headers:{\n                Authorization : \"Bearer \" + LocalStorageService.getToken()\n            }});\n        if (response) {\n            return response.data;\n        }\n\n    };\n\n    const _updateHesCode = async (id, hesCode)=>{\n        const url = \"http://localhost:8080/api/v1/students/\" + id\n        const response = await axios.patch(url,{}, {headers: {\n                \"hesCode\": hesCode,\n                Authorization : \"Bearer \" + LocalStorageService.getToken()\n            }})\n        if (response) {\n            return response.data;\n        }\n    }\n\n    const _deleteStudent = async (id)=>{\n        const url = \"http://localhost:8080/api/v1/students/\" + id\n        const response = await axios.delete(url,{headers:{\n                Authorization : \"Bearer \" + LocalStorageService.getToken()\n            }} )\n        if (response) {\n            return response.data;\n        }\n    }\n\n    const _getNotifications=async (id) => {\n        const url = \"http://localhost:8080/api/v1/students/\" + id + \"/notifications\"\n        const response = await axios.get(url, {\n            headers: {\n                Authorization: \"Bearer \" + LocalStorageService.getToken()\n            }\n        })\n    }\n\n    const _getReservations=async (id) => {\n        const url = \"http://localhost:8080/api/v1/students/\" + id + \"/reservations\"\n        const response = await axios.get(url, {\n            headers: {\n                Authorization: \"Bearer \" + LocalStorageService.getToken()\n            }\n        })\n    }\n\n\n    return {\n        fetchAllStudents: _fetchAllStudents,\n        getStudentById: _getStudentById,\n        createStudent: _createStudent,\n        getStudentByHesCode: _getStudentByHesCode,\n        updateHesCode: _updateHesCode,\n        deleteStudent: _deleteStudent,\n        validateHesCode: _validateHesCode,\n        getNotifications: _getNotifications,\n        getReservations: _getReservations}\n})();\nexport default StudentService;\n\n\n"]},"metadata":{},"sourceType":"module"}